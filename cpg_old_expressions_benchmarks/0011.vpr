// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field b: Bool
field c: Ref
field d: Ref
field f: Int

method succeeds1(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, 1/2) && acc(x.d.f, 1/2)
  ensures acc(x.c,k ) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures x.b ==> acc(x.d.f)
  ensures r == true
{
  if (x.b) {
    assert acc(x.c.f)
  }

  r := x.b ? x.c == x.d : true
}

method succeeds2(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, k) && acc(x.d.f)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures acc(x.c.f, k) && acc(x.d.f)
  ensures x.b ==> x.c.f == x.d.f
{}

method fails0(k: Perm, b1: Bool, x: Ref)
  requires acc(x.f, 1/2) && acc(x.f, 1/2)
  ensures acc(x.f)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(x.f)
{}

method fails1(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires x.b <==> x.c == x.d
  requires acc(x.c.f, 1/2) && acc(x.d.f, 1/2)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures x.b ==> acc(x.d.f)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures x.b ==> acc(x.c.f)
  ensures r == true
{
  if (x.b) {
    assert acc(x.c.f)
  }

  r := x.b ? x.c == x.d : true
}

method fails2(k: Perm, x: Ref) returns (r: Bool)
  requires k > none
  requires acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  requires x.c != null && x.d != null
  requires acc(x.c.f, k) && acc(x.d.f)
  ensures acc(x.c, k) && acc(x.d, k) && acc(x.b, k)
  ensures x.c != null && x.d != null
  ensures acc(x.c.f, k) && acc(x.d.f)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures x.b <==> x.c.f == x.d.f
    /* c.x and d.x might be equal although c != d and hence !b */
{}
