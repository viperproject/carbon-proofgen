// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Ref
field g: Bool /* Must be a finite domain, Int didn't trigger the bug */

method test04(x: Ref)
  requires acc(x.f) && x.f != null && acc(x.f.g) && x.f.g
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false /* Held previously */
}

method test01(x: Ref)
  requires acc(x.f) && x.f != null
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test02(x: Ref)
  requires acc(x.f, 1/2) && x.f != null && acc(x.f, 1/2)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test03(x: Ref)
  requires acc(x.f) && x.f != null && acc(x.f.g)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test05(x: Ref)
  requires acc(x.f) && acc(x.f.g) && x.f.g
{
  assert x.f != null

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test06(x: Ref)
  requires acc(x.f) && x.f != null
  requires acc(x.f.g) && x.f.g
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


/* Code submitted alongside the issue */

field Testtk: Ref
field joinable: Bool

method TestBug(this: Ref, k$_1: Perm)
  requires acc(this.Testtk, write) && (this.Testtk != null) && acc(this.Testtk.joinable, write) && this.Testtk.joinable
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method TestBug1(this: Ref, k$_1: Perm)
  requires acc(this.Testtk, write) && (this.Testtk != null)
  requires acc(this.Testtk.joinable, write) && this.Testtk.joinable
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
