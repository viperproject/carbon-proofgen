// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Counter__x: Int

method Main__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var c: Ref
  var __flatten_1: Ref
  var __flatten_2: Int
  var __flatten_8: Int
  __flatten_1 := Counter__Counter(current_thread_id)
  c := __flatten_1
  __flatten_2 := 16
  __flatten_8 := __flatten_2
  c.Counter__x := __flatten_8
  Counter__incr(c, current_thread_id)
  assert c.Counter__x == 17
  Counter__incr(c, current_thread_id)
  //:: ExpectedOutput(assert.failed:assertion.false)
  // confirmed by Stefan Blom
  assert c.Counter__x == 17
}

method Main__Main(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new()
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Counter__incr(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Counter__x, write)
  ensures acc(diz.Counter__x, write)
  ensures diz.Counter__x == old(diz.Counter__x) + 1
{
  var __flatten_5: Int
  var __flatten_11: Int
  __flatten_5 := diz.Counter__x + 1
  __flatten_11 := __flatten_5
  diz.Counter__x := __flatten_11
}

method Counter__Counter(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Counter__x, write) && (sys__result.Counter__x == 0)
{
  var diz: Ref
  var __flatten_6: Int
  var __flatten_12: Int
  diz := new(Counter__x)
  __flatten_6 := 0
  __flatten_12 := __flatten_6
  diz.Counter__x := __flatten_12
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Counter__x, write) && (sys__result.Counter__x == 0))
  inhale false
}