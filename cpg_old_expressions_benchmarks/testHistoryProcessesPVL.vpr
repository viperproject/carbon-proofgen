// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Ref__x: Int

field Ref__x_old: Int

field Ref__Integer_value: Int

method Ref__empty(diz: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x)
{
  inhale false
}

method Ref__incr(diz: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x) + 1
{
  inhale false
}

method Ref__single(diz: Ref, n: Int)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires n >= 0
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x) + n
{
  var if_any_bool: Bool
  if (n > 0) {
    Ref__incr(diz)
    Ref__single(diz, n - 1)
  } else {
    Ref__empty(diz)
  }
}

method Ref__dual(diz: Ref, n: Int, m: Int)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires (n >= 0) && (m >= 0)
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x) + n + m
{
  var if_any_bool: Bool
  var __flatten_4: Bool
  var __flatten_5: Bool
  __flatten_5 := Ref__if_any_random(diz)
  __flatten_4 := __flatten_5
  if_any_bool := __flatten_4
  if (if_any_bool) {
    if (n > 0) {
      Ref__incr(diz)
      Ref__dual(diz, n - 1, m)
    } else {
      Ref__empty(diz)
      Ref__single(diz, m)
    }
  } elseif (m > 0) {
    Ref__incr(diz)
    Ref__dual(diz, m - 1, n)
  } else {
    Ref__empty(diz)
    Ref__single(diz, n)
  }
}

method Ref__triple21(diz: Ref, n: Int, m: Int, k: Int)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires (n >= 0) && (m >= 0) && (k >= 0)
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x) + n + m + k
{
  var if_any_bool: Bool
  var __flatten_14: Bool
  var __flatten_15: Bool
  var __flatten_16: Bool
  var __flatten_17: Bool
  __flatten_15 := Ref__if_any_random(diz)
  __flatten_14 := __flatten_15
  if_any_bool := __flatten_14
  if (if_any_bool) {
    __flatten_17 := Ref__if_any_random(diz)
    __flatten_16 := __flatten_17
    if_any_bool := __flatten_16
    if (if_any_bool) {
      if (n > 0) {
        Ref__incr(diz)
        Ref__triple21(diz, n - 1, m, k)
      } else {
        Ref__empty(diz)
        Ref__dual(diz, m, k)
      }
    } elseif (m > 0) {
      Ref__incr(diz)
      Ref__triple21(diz, m - 1, n, k)
    } else {
      Ref__empty(diz)
      Ref__dual(diz, n, k)
    }
  } elseif (k > 0) {
    Ref__incr(diz)
    Ref__triple12(diz, k - 1, n, m)
  } else {
    Ref__empty(diz)
    Ref__dual(diz, n, m)
  }
}

method Ref__triple12(diz: Ref, n: Int, m: Int, k: Int)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires (n >= 0) && (m >= 0) && (k >= 0)
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == old(diz.Ref__x) + n + m + k
{
  var if_any_bool: Bool
  var __flatten_30: Bool
  var __flatten_31: Bool
  var __flatten_36: Bool
  var __flatten_37: Bool
  __flatten_31 := Ref__if_any_random(diz)
  __flatten_30 := __flatten_31
  if_any_bool := __flatten_30
  if (if_any_bool) {
    if (n > 0) {
      Ref__incr(diz)
      Ref__triple12(diz, n - 1, m, k)
    } else {
      Ref__empty(diz)
      Ref__dual(diz, m, k)
    }
  } else {
    __flatten_37 := Ref__if_any_random(diz)
    __flatten_36 := __flatten_37
    if_any_bool := __flatten_36
    if (if_any_bool) {
      if (m > 0) {
        Ref__incr(diz)
        Ref__triple21(diz, m - 1, k, n)
      } else {
        Ref__empty(diz)
        Ref__dual(diz, k, n)
      }
    } elseif (k > 0) {
      Ref__incr(diz)
      Ref__triple21(diz, k - 1, m, n)
    } else {
      Ref__empty(diz)
      Ref__dual(diz, m, n)
    }
  }
}

method Ref__destroy_check(diz: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  ensures acc(diz.Ref__x, write)
  ensures (old(diz.Ref__x) == 0) ==> (diz.Ref__x == 1)
{
  var if_any_bool: Bool
  if (1 > 0) {
    Ref__incr(diz)
    Ref__single(diz, 1 - 1)
  } else {
    Ref__empty(diz)
  }
}

method Ref__Ref() returns (sys__result: Ref)
  ensures sys__result != null
  ensures acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0)
{
  var diz: Ref
  var __flatten_92: Ref
  __flatten_92 := new(Ref__x, Ref__x_old, Ref__Integer_value)
  diz := __flatten_92
  diz.Ref__x := 0
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0))
  inhale false
}

method Ref__empty_begin(diz: Ref)
  requires diz != null
{
  inhale false
}

method Ref__empty_commit(diz: Ref)
  requires diz != null
{
  inhale false
}

method Ref__incr_begin(diz: Ref)
  requires diz != null
{
  inhale false
}

method Ref__incr_commit(diz: Ref)
  requires diz != null
{
  inhale false
}

method Ref__if_any_random(diz: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}