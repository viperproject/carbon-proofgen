


field y: Int

field z: Int

field x: Int




method check_sat_Main()
{
  assert false
}


method check_sat_problem1(this: Ref)
  requires this != null
  requires acc(this.x, write)
  requires acc(this.y, write)
  requires acc(this.z, write)
{
  assert false
}

method problem1(this: Ref, tid: Int) returns (res: Int)
  requires this != null
  requires acc(this.x, write)
  requires acc(this.y, write)
  requires acc(this.z, write)
  ensures acc(this.x, write)
  ensures acc(this.y, write)
  ensures acc(this.z, write)
  ensures this.x + this.y == this.z
{
  var exc: Ref
  var return: Int
  var t: Int
  var tmp: Int
  var this1: Ref
  var flatten: Ref
  var flatten1: Int
  var flatten2: Ref
  var flatten3: Int
  var flatten4: Ref
  var flatten5: Int
  var flatten6: Ref
  var flatten7: Int
  var flatten8: Int
  var flatten9: Ref
  var flatten10: Int
  var flatten11: Ref
  exc := null
  flatten := this
  flatten1 := 0
  flatten.x := flatten1
  flatten2 := this
  flatten3 := 1
  flatten2.y := flatten3
  flatten4 := this
  flatten5 := 2
  flatten4.z := flatten5
  flatten6 := this
  this1 := flatten6
  exhale acc(this1.x, 1 * write / 2) && acc(this1.y, 1 * write / 2) &&
    acc(this1.z, 1 * write / 2) &&
    this1.x + this1.y == this1.z
  flatten7 := this.x + this.z
  t := flatten7
  inhale acc(this1.x, 1 * write / 2) && acc(this1.y, 1 * write / 2) &&
    acc(this1.z, 1 * write / 2) &&
    this1.x + this1.y == this1.z
  flatten8 := this.x
  tmp := flatten8
  flatten9 := this
  flatten10 := this.y
  flatten9.x := flatten10
  flatten11 := this
  flatten11.y := tmp
  exhale acc(this1.x, 1 * write / 2) && acc(this1.y, 1 * write / 2) &&
    acc(this1.z, 1 * write / 2) &&
    this1.x + this1.y == this1.z
  inhale acc(this1.x, 1 * write / 2) && acc(this1.y, 1 * write / 2) &&
    acc(this1.z, 1 * write / 2) &&
    this1.x + this1.y == this1.z
  res := return
  assert exc == null
}

method check_sat_type()
{
  assert false
}

method check_sat_subtype(subtype1: Int, subtype2: Int)
  requires subtype1 >= 0
  requires subtype1 <= 1
  requires subtype2 >= 0
  requires subtype2 <= 1
{
  assert false
}