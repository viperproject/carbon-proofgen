package viper.carbon.proofgen

import viper.silver.{ast => sil}
import isabelle.ast._

import scala.collection.mutable.ListBuffer
import isabelle.ast.ProofUtil._
import isabelle.ast.IsaUtil._
import isabelle.ast.MLUtil.{isaToMLThm, isaToMLThms, mlTacticToIsa, simpAsm}
import viper.carbon.proofgen.functions.FunctionProofGenInterface
import viper.carbon.proofgen.hints.{AtomicHint, IfHint, InhaleStmtComponentHint, InhaleStmtHint, LocalVarAssignHint, MLHintGenerator, MethodProofHint, SeqnProofHint, StmtProofHint, WhileHint}


case class MethodProofGenerator(
                                 theoryName: String,
                                 vprProg: IsaViperMethodAccessor,
                                 vprTranslation: VarTranslation[sil.LocalVar],
                                 boogieProg: IsaBoogieProcAccessor,
                                 methodProofHint: MethodProofHint,
                                 functionProofGenInterface: FunctionProofGenInterface)
{

  val globalBplData = boogieProg.globalDataAccessor

  val varContextViperName = "var_ctxt_viper"
  val varContextBoogieName = "var_ctxt_bpl"
  val typeInterpBplName = "type_interp_bpl"

  val varRelationListName = "var_relation_list_1"
  val varRelationBoundedByName = "var_relation_list_1_bound"
  val translationRecordName = "tr_vpr_bpl_0"
  val stateRelInitialName = "state_rel_initial"

  val constReprBasic = TermIdent("const_repr_basic")

  val funReprConcrete = TermIdent("fun_repr_concrete")

  def generateProof() : Theory = {

    val outerDecls : ListBuffer[OuterDecl] = ListBuffer.empty

    val viperVarContextDef = DefDecl(
      varContextViperName,
      Some(ArrowType(IsaTypeUtil.natType, IsaTypeUtil.optionType(ViperIsaType.viperTyType))),
      (Seq(), IsaTermUtil.mapOf(vprProg.methodArgs))
    )

    outerDecls += viperVarContextDef

    val varRelationList = {
      TermList(
        vprTranslation.availableVariables().map(
          vprVar => {
            val vprVarId = vprTranslation.translateVariableId(vprVar).get
            val bplVarId = boogieProg.getBoogieVarId(vprVar)
            TermTuple(Seq(NatConst(vprVarId), NatConst(bplVarId)))
          }
        )
      )
    }

    val varRelationListDef = DefDecl(
      varRelationListName,
      Some(IsaTypeUtil.listType(TupleType(ViperIsaType.varNameType, BoogieIsaType.varNameType))),
      (Seq(), varRelationList)
    )

    outerDecls += varRelationListDef

    val varRelationBoundedBy = LemmaDecl(
      varRelationBoundedByName,
      ViperBoogieIsaUtil.allVarsInListBoundedBy(
        TermIdent(varRelationListName),
        ViperBoogieIsaUtil.maxInRangeOfList(varRelationList)
      ),
      Proof(Seq(ProofUtil.byTac(ProofUtil.simpTac(IsaUtil.definitionLemmaFromName(varRelationListName)))))
    )

    outerDecls += varRelationBoundedBy

    val translationRecord = TranslationRecord.makeTranslationRecord(
      heapVar = NatConst(globalBplData.getVarId(HeapGlobalVar)),
      maskVar = NatConst(globalBplData.getVarId(MaskGlobalVar)),
      heapVarDef = NatConst(globalBplData.getVarId(HeapGlobalVar)),
      maskVarDef = NatConst(globalBplData.getVarId(MaskGlobalVar)),
      maskRead = TermApp(TermIdent("read_mask_concrete"), TermIdent("fun_repr_concrete")),
      maskUpdate = TermApp(TermIdent("update_mask_concrete"), TermIdent("fun_repr_concrete")),
      heapRead = TermApp(TermIdent("read_heap_concrete"), TermIdent("fun_repr_concrete")),
      heapUpdate = TermApp(TermIdent("update_heap_concrete"), TermIdent("fun_repr_concrete")),
      fieldTranslation = IsaTermUtil.mapOf(vprProg.globalDataAccessor.fieldRel),
      funTranslation = TermIdent("f_None"),
      varTranslation = IsaTermUtil.mapOf(TermIdent(varRelationListDef.name)),
      /* TODO: the constants representation should be generated by Carbon and not hardcoded */
      constRepr = constReprBasic
    )

    val translationRecordDef = DefDecl(translationRecordName,
      Some(TranslationRecord.translationRecordType),
      (Seq(), translationRecord))

    outerDecls += translationRecordDef

    outerDecls += DeclareDecl(s"${TranslationRecord.translationRecordTypeName}.defs(1)[simp]")
    outerDecls += DeclareDecl(s"${ViperIsaType.vprProgramTypeName}.defs(1)[simp]")

    val varContextBplAbbrev = AbbrevDecl(varContextBoogieName,
      None,
      (Seq(), boogieProg.varContext)
    )

    outerDecls += varContextBplAbbrev

    val stateRelInitialAbbrev: AbbrevDecl  =
      AbbrevDecl(
        stateRelInitialName,
        None,
        (Seq(TermIdent("A"), TermIdent("Pr"), TermIdent("ctxt"), TermIdent("w"), TermIdent("ns")),
          ViperBoogieRelationIsa.stateRelationDefSame(
            TermIdent("Pr"),
            TypeRepresentation.makeBasicTypeRepresentation(TermIdent("A")),
            TermIdent(translationRecordDef.name),
            IsaTermUtil.emptyMap,
            TermIdent("ctxt"),
            TermIdent("w"),
            TermIdent("ns")
          )
        )
      )

    outerDecls += stateRelInitialAbbrev

    val typeInterpBplAbbrev: AbbrevDecl =
      AbbrevDecl(
        typeInterpBplName,
        None,
        (Seq(TermIdent("A")), ViperBoogieRelationIsa.viperBoogieAbstractTypeInterp(TypeRepresentation.makeBasicTypeRepresentation(TermIdent("A"))))
      )

    outerDecls += typeInterpBplAbbrev

    outerDecls += mainProofLocale()

    Theory(
      theoryName = theoryName,
      importTheories = Seq(
        "TotalViper.ViperBoogieTranslationInterface",
        "TotalViper.ExprWfRelML",
        "TotalViper.CPGHelperML",
        "TotalViper.StmtRelML",
        "TotalViper.ViperBoogieEndToEnd",
        "Boogie_Lang.TypingML",
        vprProg.theoryName,
        "../"+vprProg.globalDataAccessor.theoryName,
        boogieProg.procTheoryPath
      ),
      decls = outerDecls.toSeq
    )
  }

  private def mainProofLocale() : LocaleDecl = {
    val exprContextBpl = TermIdent("ectxt")
    val totalContextVpr = TermIdent("ctxt_vpr")

    val tyInterpEqBpl = "TyInterpBpl"
    val bplCtxtWfLabel = "CtxtWf"

    val funInterpWfBpl = "WfFunBpl"

    val vprProgramTotal = "VprProgramTotal"

    val rtypeInterpEmpty = "RtypeInterpEmpty"

    val absvalInterpVpr = ViperTotalContext.absvalInterpTotal(totalContextVpr)

    val contextElem = ContextElem(
      //fixes
      Seq( ( exprContextBpl, ViperBoogieRelationIsa.expressionContextType(VarType("'a")) ),
           ( totalContextVpr, ViperIsaType.totalContext(VarType("'a")))
      ),

      //assumes
      Seq( (Some("VarContextBpl [simp]"), TermBinary.eq(BoogieExpressionContext.varContext(exprContextBpl), TermIdent(varContextBoogieName))),
           (Some(s"$tyInterpEqBpl [simp]"), TermBinary.eq(BoogieExpressionContext.typeInterp(exprContextBpl),
             TermApp(TermIdent(typeInterpBplName), absvalInterpVpr))
           ),
        (Some(bplCtxtWfLabel), BoogieExpressionContext.wellFormed(
           viperProgram = vprProg.globalDataAccessor.vprProgram,
           tyReprBpl = TypeRepresentation.makeBasicTypeRepresentation(absvalInterpVpr),
           fieldMap = IsaTermUtil.mapOf(vprProg.globalDataAccessor.fieldRel),
           funMap = funReprConcrete,
           exprContext = exprContextBpl
          ) ),
        (Some(funInterpWfBpl), BoogieIsaTerm.funInterpWf(
          typeInterp = BoogieExpressionContext.typeInterp(exprContextBpl),
          funDecls = globalBplData.funDecls,
          funInterp = BoogieExpressionContext.funInterp(exprContextBpl)
          )),
        (Some ("VprProgramTotal [simp]"), TermBinary.eq(ViperTotalContext.programTotal(totalContextVpr), vprProg.globalDataAccessor.vprProgram)),
        (Some(rtypeInterpEmpty + "[simp]"), TermBinary.eq(ViperTotalContext.rtypeInterp(exprContextBpl), TermList(Seq())))
      )
    )

    val xId = SimpleIdentifier("x")
    val tId = SimpleIdentifier("t")

    val varContextWfBplLemma =
      LemmaDecl(
        "var_ctxt_bpl_wf",
        ContextElem.empty(),
        TermQuantifier(All, Seq(xId, tId),
          TermBinary.implies(
            TermBinary.eq(BoogieIsaTerm.lookupVarTy(BoogieExpressionContext.varContext(exprContextBpl), TermIdent(xId)), IsaTermUtil.some(TermIdent(tId))),
            BoogieIsaTerm.wfTy(TermIdent(tId))
          )
        ),
        Proof(Seq((using(boogieProg.varContextWfThm, byTac(simp)) : String)))
      )

    val outerDecls : ListBuffer[OuterDecl] = ListBuffer.empty
    outerDecls += varContextWfBplLemma

    val basicDisjointnessLemmas = LemmasDecl(
      "basic_disjointness_lemmas",
      Seq(
        not_satisfies_prop_set(ProofUtil.OF("list_all_ran_map_of", varRelationBoundedByName)),
        not_satisfies_prop_set(ProofUtil.OF("list_all_ran_map_of", vprProg.globalDataAccessor.fieldRelBoundedLemma)),
        not_satisfies_prop_set("const_repr_basic_bound_2")
      )
    )

    outerDecls += basicDisjointnessLemmas

    val lookupVarRelTac = "lookup_var_rel_tac"
    val simpWithTrDef = "simp_with_tr_def_tac"
    val simpWithTyReprDef = "simp_with_ty_repr_def_tac"
    val typeSafetyThmMap = "type_safety_thm_map"
    val lookupVarBplThms = "lookup_var_bpl_thms"
    val lookupFunBplThms = "lookup_fun_bpl_thms"

    val expRelInfo = "exp_rel_info"
    val expWfRelInfo = "exp_wf_rel_info"

    val basicStmtRelInfo = "basic_stmt_rel_info"
    val stmtRelInfo = "stmt_rel_info"
    val stmtRelHints = "stmt_rel_hints"
    val stmtPreconditionHints = "stmt_precondition_hints"

    val stmtPreconditionHintValue =
      if(vprProg.origMethod.pres.isEmpty) {
        None
      } else {
        Some(AtomicHint(InhaleStmtHint(Seq(InhaleStmtComponentHint(IsaMethodSpecificationHelper.conjoinSpecInhaleHints(methodProofHint.preconditionInhaleHint))))))
      }

    val inhaleRelInfo = "inhale_rel_info"
    val exhaleRelInfo = "exhale_rel_info"

    val auxVarDisjTac = "aux_var_disj_tac"

    val heapReadWfTac = "heap_read_wf_tac"
    val heapReadMatchTac = "heap_read_match_tac"
    val fieldRelTac  = "field_rel_tac"
    val fieldLookupTac = "field_lookup_tac"
    val fieldRelSingleTac = "field_rel_single_tac"

    val fieldAccInitTac = "field_acc_init_tac"
    val fieldAccessWfRelTacAuxInst = "field_access_wf_rel_tac_aux_inst"

    val mlInitializationCode =
      Seq(
        MLUtil.defineVal(lookupVarRelTac, MLUtil.simpAsmSolved(isaToMLThms(Seq(definitionLemmaFromName(translationRecordName), definitionLemmaFromName(varRelationListName))))),
        MLUtil.defineVal(simpWithTrDef, MLUtil.simpAsmSolved(isaToMLThms(Seq(definitionLemmaFromName(translationRecordName))))),
        MLUtil.defineVal(simpWithTyReprDef, MLUtil.simpAsmSolved(isaToMLThms(Seq(definitionLemmaFromName(TypeRepresentation.tyReprBasicName))))),
        MLUtil.defineVal(typeSafetyThmMap, ViperBoogieMLUtil.genTypeSafetyThmMap(
          isaToMLThm(funInterpWfBpl),
          isaToMLThm(globalBplData.funDeclsWf.toString),
          isaToMLThm(varContextWfBplLemma.name),
          isaToMLThm(ViperBoogieRelationIsa.stateRelationWellTypedThm.toString)
          )
        ),

        //TODO: more fine-grained approach (specify required lookup theorems for different expressions)
        // TODO: take lookup theorems for constants and globals into account
        MLUtil.defineVal(lookupVarBplThms, isaToMLThms(
          /** include all Boogie variable lookup theorems that are required for Boogie expressions corresponding to Viper
            * expressions
            */
          Seq(
            boogieProg.getGlobalLookupTyThm(HeapGlobalVar),
            boogieProg.getGlobalLookupTyThm(MaskGlobalVar)
          ) ++
          boogieProg.getAllLocalVariables().map(l => boogieProg.getLocalLookupTyThm(l)).toSeq ++
          vprProg.origProgram.fields.map(field => boogieProg.getGlobalLookupTyThm(FieldConst(field)))
        )),

        MLUtil.defineVal(lookupFunBplThms, isaToMLThms(
          functionProofGenInterface.allFunBplLookupLemmasForViperExpressions(vprProg.origProgram.functions)
        )),

        MLUtil.defineFun(heapReadWfTac, Seq("ctxt"),
          MLUtil.seqPrimeTac(
            MLUtil.app(MLUtil.simpAsm(MLUtil.isaToMLThms(Seq(definitionLemmaFromName(translationRecordName)))), "ctxt"),
            MLUtil.resolveTac("ctxt", MLUtil.isaToMLThms(Seq("heap_wf_concrete[OF CtxtWf wf_ty_repr_basic]")))
          )
        ),

        MLUtil.defineFun(heapReadMatchTac, Seq("ctxt"),
            MLUtil.simpAsmSolved(MLUtil.isaToMLThms(Seq(
              definitionLemmaFromName(translationRecordName),
              definitionLemmaFromName(TypeRepresentation.tyReprBasicName),
              definitionLemmaFromName("read_heap_concrete"))
            ), "ctxt"),
          ),

        MLUtil.defineFun(fieldRelTac, Seq("ctxt"),
          MLUtil.simpAsmSolved(MLUtil.isaToMLThms(Seq(
            definitionLemmaFromName(translationRecordName),
            definitionLemmaFromName(vprProg.globalDataAccessor.fieldRel.toString)
            )),
            "ctxt"
          )
        ),

        MLUtil.defineFun(fieldLookupTac, Seq("ctxt"),
          MLUtil.simpAsmSolved(MLUtil.isaToMLThms(Seq(
            definitionLemmaFromName(vprProg.globalDataAccessor.vprProgram.toString),
            definitionLemmaFromName(vprProg.globalDataAccessor.fields.toString)
          )),
            "ctxt")
        ),

        MLUtil.defineVal(fieldRelSingleTac,
          MLUtil.app("field_rel_single_inst_tac", Seq(fieldRelTac, fieldLookupTac))
        ),

        MLUtil.defineVal(expRelInfo, ViperBoogieMLUtil.createExpRelInfo(
          typeSafetyThmMap,
          lookupVarRelTac,
          simpWithTrDef,
          lookupVarThms = lookupVarBplThms,
          lookupFunBplThms = lookupFunBplThms,
          simplifyRtypeInterpTac =
            s"fn ctxt => ${MLUtil.tryPrimeTac("("+MLUtil.simpOnly(MLUtil.isaToMLThms(Seq(rtypeInterpEmpty)), "ctxt") +")")}",
          fieldAccessRelPreTac =
            ViperBoogieMLUtil.fieldAccessRelPreTac(
              heapReadWfTac = heapReadWfTac,
              heapReadMatchTac = heapReadMatchTac,
              fieldRelSingleTac = fieldRelSingleTac
            )
        )),

        MLUtil.defineFun(fieldAccInitTac, Seq("ctxt"), MLUtil.resolveTac("ctxt",
          MLUtil.isaToMLThms(Seq(ProofUtil.OF("syn_field_access_valid_wf_rel", Seq(bplCtxtWfLabel, "wf_ty_repr_basic"))))
        )),

        MLUtil.defineVal(fieldAccessWfRelTacAuxInst,
          ViperBoogieMLUtil.fieldAccessWfRelTacAuxInst(
            fieldAccInitTac = fieldAccInitTac,
            lookupMaskVarTac = simpWithTrDef,
            fieldRelSingleTac = fieldRelSingleTac,
            tyArgsEqTac =  simpWithTyReprDef,
            expRelInfo = expRelInfo
          )
        ),

        MLUtil.defineVal(expWfRelInfo,
          ViperBoogieMLUtil.createExpWfRelInfo(fieldAccessWfRelTacAuxInst)
        ),

        MLUtil.defineVal(auxVarDisjTac,
          MLUtil.simpAsmSolved(MLUtil.isaToMLThms(Seq(definitionLemmaFromName(translationRecordName), basicDisjointnessLemmas.name)))
        ),

        MLUtil.defineVal(basicStmtRelInfo, ViperBoogieMLUtil.createBasicStmtRelInfo(
          ctxtWfThm = isaToMLThm(bplCtxtWfLabel),
          vprProgramContextEqThm = isaToMLThm(vprProgramTotal),
          trDefThm = isaToMLThm(definitionLemmaFromName(translationRecordName)),
          varRelTac = lookupVarRelTac,
          varContextVprTac = "assm_full_simp_solved_with_thms_tac " + isaToMLThms(Seq(definitionLemmaFromName(varContextViperName))),
          fieldRelSingleTac = fieldRelSingleTac,
          auxVarDisjTac = auxVarDisjTac,
          tyInterpEContextBplEq = MLUtil.isaToMLThm(tyInterpEqBpl)
          )
        ),

        MLUtil.defineVal(
          inhaleRelInfo,
          ViperBoogieMLUtil.createInhaleRelInfo(
            basicStmtRelInfo = basicStmtRelInfo,
            atomicInhaleRelTac = "atomic_inhale_rel_inst_tac"
          )
        ),

        MLUtil.defineVal(
          exhaleRelInfo,
          ViperBoogieMLUtil.createExhaleRelInfo(
            basicStmtRelInfo = basicStmtRelInfo,
            atomicExhaleRelTac = "atomic_exhale_rel_inst_tac"
          )
        ),

        MLUtil.defineVal(stmtRelInfo, ViperBoogieMLUtil.createStmtRelInfo(
          basicStmtRelInfo = basicStmtRelInfo,
          atomicRelTac = "atomic_rel_inst_tac",
          inhaleRelInfo = inhaleRelInfo,
          exhaleRelInfo = exhaleRelInfo
        )),

        MLUtil.defineVal(stmtRelHints, MLHintGenerator.generateStmtHintsInML(methodProofHint.bodyHint, boogieProg, expWfRelInfo, expRelInfo)),
      ) ++
      stmtPreconditionHintValue.fold[Seq[String]](Seq())(h => Seq(
          MLUtil.defineVal(stmtPreconditionHints, MLHintGenerator.generateStmtHintsInML(h, boogieProg, expWfRelInfo, expRelInfo))
      ))

    outerDecls += MLDecl(mlInitializationCode, MLNormal)

    val outputStateRel = TermApp(TermIdent(stateRelInitialName), Seq(absvalInterpVpr, vprProg.globalDataAccessor.vprProgram, exprContextBpl))

    val mainTheorem = LemmaDecl("method_rel_proof",
      ContextElem.empty(),
      ViperBoogieRelationIsa.methodRel(
        stateRelEnter=ViperBoogieRelationIsa.stateRelEmpty(TermApp(TermIdent(stateRelInitialName), Seq(absvalInterpVpr, vprProg.globalDataAccessor.vprProgram, exprContextBpl))),
        stateRelExit=outputStateRel,
        totalContextVpr=totalContextVpr,
        stateConsistency=TermIdent("StateCons"),
        varContextVpr=TermIdent(varContextViperName),
        programVpr=TermIdent("P"),
        expressionContextBpl=exprContextBpl,
        methodDecl = vprProg.methodDecl,
        configBplEnter=ViperIsaTerm.convertAstToProgramPoint(TermIdent(boogieProg.procBodyAstDef))
      ),
      Proof(
        Seq(
          applyTac(unfoldTac(IsaUtil.definitionLemmaFromName(ViperBoogieRelationIsa.methodRelName))),
          applyTac(ruleTac("exI")),
          applyTac(introTac("conjI")),
        ) ++
        initBoogieStateProof(bplCtxtWfLabel, IsaPrettyPrinter.prettyPrint(outputStateRel)) ++
        inhalePreconditionProof(stmtRelInfo, stmtPreconditionHints) ++
        postconditionFramingProof() ++
        methodBodyProof(stmtRelInfo, stmtRelHints) ++
        Seq(doneTac)
      )
    )

    outerDecls += mainTheorem

    LocaleDecl("method_proof", contextElem, outerDecls.toSeq)
  }

  private def inhalePreconditionProof(stmtRelInfo: String, stmtRelTacHints: String) : Seq[String] = {
    applyTac(unfoldTac(vprProg.methodDeclProjectionLemmaName(IsaMethodPrecondition))) +:
    (
      if(vprProg.origMethod.pres.isEmpty) {
        Seq(
          applyTac(ruleTac("inhale_stmt_rel")),
          applyTac(ruleTac("inhale_rel_true"))
        )
      } else {
        Seq(
          applyTac(ViperBoogieRelationIsa.stmtRelPropagatePostSameRelTac),
          applyTac(ViperBoogieRelationIsa.stmtRelTac(MLUtil.contextAniquotation, stmtRelInfo, stmtRelTacHints)),
          applyTac(ViperBoogieRelationIsa.progressBplTac(MLUtil.contextAniquotation)),
        )
      }
    )
  }

  private def postconditionFramingProof() : Seq[String] = {
    Seq("defer") //TODO
  }

  private def methodBodyProof(stmtRelInfo: String, stmtRelTacHints: String) : Seq[String] = {
    Seq(
      //applyTac(unfoldTac(IsaUtil.definitionLemmaFromName(vprProg.methodBody.toString))),
      applyTac("(rule exI)+"),
      applyTac(introTac("conjI")),
      applyTac(simpTac(vprProg.methodDeclProjectionLemmaName(IsaMethodBody))),
      applyTac(ViperBoogieRelationIsa.stmtRelPropagatePostSameRelTac),
      applyTac(ViperBoogieRelationIsa.stmtRelTac(MLUtil.contextAniquotation, stmtRelInfo, stmtRelTacHints)),
      applyTac(ViperBoogieRelationIsa.progressBplTac(MLUtil.contextAniquotation)),
    )
  }

  private def initBoogieStateProof(ctxtBplWfThm: String, outputStateRel: String): Seq[String] = {
    Seq(
      applyTac(unfoldTac(Seq(IsaUtil.definitionLemmaFromName(ViperBoogieRelationIsa.stateRelEmptyName),
                             IsaUtil.definitionLemmaFromName(boogieProg.procBodyAstDef)))),
      applyTac(BoogieIsaTerm.simplifyAstToProgramPointTac),
      applyTac(ViperBoogieRelationIsa.stmtRelPropagatePreTac),
      applyTac(ruleTac("exI")),
      applyTac(BoogieIsaTerm.unfoldASTBlockInGoalTac),
      applyTac(BoogieIsaTerm.redAstPropagateRelTac),
      applyTac(BoogieIsaTerm.redAstOneSimpleCmdTac),
      applyTac(BoogieIsaTerm.assignIntroAltTac),
      applyTac(simpTac(boogieProg.getGlobalLookupTyThm(MaskGlobalVar))),
      applyTac(ruleTac(BoogieIsaTerm.redVarThm)),
      applyTac(ViperBoogieRelationIsa.zeroMaskLookupTactic(IsaUtil.definitionLemmaFromName(translationRecordName))),
      applyTac(simpTac(IsaUtil.definitionLemmaFromName(TypeRepresentation.tyReprBasicName))),
    ) ++
    initUpdatedStateInRelation() ++
    initAssumeGoodState(ctxtBplWfThm, outputStateRel)
  }

  private def initUpdatedStateInRelation() : Seq[String] = {
    Seq(
      applyTac(ruleTac(ViperBoogieRelationIsa.stateRelMaskUpdateThm)),
      applyTac(fastforceTac),
      applyTac(simpTac(IsaUtil.definitionLemmaFromName(translationRecordName))),
      applyTac(fastforceTacWithIntros(Seq(ViperBoogieRelationIsa.zeroMaskRelThm))),
      applyTac(simpTac),
      applyTac(simpTac(IsaUtil.definitionLemmaFromName(translationRecordName))),
      applyTac(simpTac),
      applyTac(simpTac)
    )
  }

  private def initAssumeGoodState(ctxtBplWfThm: String, outputStateRel: String) : Seq[String] = {
    Seq(
      applyTac(ProofUtil.ruleTac(ProofUtil.where(BoogieIsaTerm.redAstPropagateRelThm, "R2.0", outputStateRel))),
      applyTac(BoogieIsaTerm.redAstOneSimpleCmdTac),
      applyTac(ViperBoogieRelationIsa.redAssumeGoodStateTac(IsaUtil.definitionLemmaFromName(translationRecordName),
        MLUtil.isaToMLThm(ctxtBplWfThm)
        )),
      applyTac(assumeTac),
      applyTac(ruleTac("conjI")),
      applyTac(simpTac),
      applyTac(BoogieIsaTerm.redAstReflTac),
      applyTac(ProofUtil.simpTac(IsaUtil.definitionLemmaFromName(translationRecordName)))
    )
  }

  private def not_satisfies_prop_set(list_all_ran_lemma: String) : String =
    ProofUtil.OF("not_satisfies_prop_in_set", list_all_ran_lemma)
}
